/**
 * ContentCard Ê†ºÂºèÂåñÂ∑•ÂÖ∑Ê®°Âùó
 * Â§ÑÁêÜÂÜÖÂÆπÂç°ÁâáÊ†ºÂºèÂåñÁõ∏ÂÖ≥ÁöÑÂ∑•ÂÖ∑ÂáΩÊï∞
 */

import { COLORS, FONTS } from '../../../constants';
import type { ContentItem } from '../../../types';

/**
 * ÂÜÖÂÆπÊ†ºÂºèÂåñÂ∑•ÂÖ∑ÂáΩÊï∞
 */
export const utilsContentFormat = () => {
  /**
   * Ê†ºÂºèÂåñËÆ°Êï∞ÊòæÁ§∫
   */
  const formatCount = (count: number): string => {
    if (count < 1000) {
      return count.toString();
    }
    
    if (count < 10000) {
      return `${(count / 1000).toFixed(1)}k`;
    }
    
    if (count < 1000000) {
      return `${Math.round(count / 1000)}k`;
    }
    
    return `${(count / 1000000).toFixed(1)}M`;
  };

  /**
   * Êà™Êñ≠ÊñáÊú¨
   */
  const truncateText = (text: string, maxLength: number = 50): string => {
    if (!text || text.length <= maxLength) {
      return text;
    }
    
    return text.substring(0, maxLength - 3) + '...';
  };

  /**
   * Ëé∑ÂèñÈ´ò‰∫ÆÊñáÊú¨ÈÉ®ÂàÜ
   */
  const getHighlightedTextParts = (text: string, keyword: string) => {
    if (!keyword) {
      return [{ text, highlighted: false }];
    }

    return highlightKeyword(text, keyword);
  };

  /**
   * Ëé∑ÂèñÂÜÖÂÆπÁ±ªÂûãÂõæÊ†á
   */
  const getContentTypeIcon = (type: ContentItem['type']): string => {
    switch (type) {
      case 'image':
        return 'üñºÔ∏è';
      case 'video':
        return 'üé¨';
      case 'text':
        return 'üìù';
      case 'activity':
        return 'üéâ';
      default:
        return 'üìÑ';
    }
  };

  /**
   * Ê†ºÂºèÂåñÊó∂Èó¥ÊòæÁ§∫
   */
  const formatTimeAgo = (timestamp: string): string => {
    const date = new Date(timestamp);
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffMins = Math.floor(diffMs / (1000 * 60));
    const diffHours = Math.floor(diffMins / 60);
    const diffDays = Math.floor(diffHours / 24);
    
    if (diffMins < 1) {
      return 'ÂàöÂàö';
    }
    
    if (diffMins < 60) {
      return `${diffMins}ÂàÜÈíüÂâç`;
    }
    
    if (diffHours < 24) {
      return `${diffHours}Â∞èÊó∂Ââç`;
    }
    
    if (diffDays < 7) {
      return `${diffDays}Â§©Ââç`;
    }
    
    return date.toLocaleDateString('zh-CN', {
      month: 'short',
      day: 'numeric',
    });
  };

  return {
    formatCount,
    truncateText,
    getHighlightedTextParts,
    getContentTypeIcon,
    formatTimeAgo,
  };
};

/**
 * ÂÖ≥ÈîÆËØçÈ´ò‰∫ÆÂ§ÑÁêÜ
 */
const highlightKeyword = (text: string, keyword: string) => {
  if (!keyword || !text) {
    return [{ text, highlighted: false }];
  }

  const regex = new RegExp(`(${keyword})`, 'gi');
  const parts = text.split(regex);
  
  return parts.map((part, index) => ({
    text: part,
    highlighted: regex.test(part),
  }));
};

// Ê†∑ÂºèÂÆö‰πâ
export const contentCardStyles = {
  normalText: {
    fontSize: FONTS.size.md,
    color: COLORS.textPrimary,
    lineHeight: FONTS.lineHeight.normal * FONTS.size.md,
  },
  highlightedText: {
    color: COLORS.primary,
    fontWeight: FONTS.weight.semiBold,
    backgroundColor: COLORS.highlightBackground,
  },
};
